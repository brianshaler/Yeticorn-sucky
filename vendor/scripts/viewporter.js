// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Viewporter = (function() {

    function Viewporter(element_id, logging_level) {
      var _this = this;
      this.element_id = element_id;
      this.logging_level = logging_level != null ? logging_level : 0;
      this.setupViewport = __bind(this.setupViewport, this);

      this.resetViewportIfChanged = __bind(this.resetViewportIfChanged, this);

      this.monitorSize = __bind(this.monitorSize, this);

      this.element = null;
      if ((this.element_id != null) && (document.getElementById(this.element_id) != null)) {
        this.element = document.getElementById(this.element_id);
      }
      this.isAndroid = navigator.userAgent.match(/Android/i);
      this.isIphone = navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPod/i);
      this.isChrome = navigator.userAgent.match(/Chrome/i) || navigator.userAgent.match(/CriOS/i);
      if (this.isChrome) {
        this.trace("I'm chrome!", 2);
      } else {
        this.trace("I'm not chrome.. ", 2);
      }
      this.pixelRatio = 1;
      if (window.devicePixelRatio) {
        this.pixelRatio = window.devicePixelRatio;
      }
      this.previousScreenSize = {
        width: 0,
        height: 0
      };
      this.viewportChanged = false;
      this.viewportWidth = 320;
      this.viewportHeight = 480;
      if (window.innerWidth < window.innerHeight) {
        this.windowInnerWidth = window.innerWidth / this.pixelRatio;
        this.windowInnerHeight = window.innerHeight / this.pixelRatio;
      } else {
        this.windowInnerWidth = window.innerHeight / this.pixelRatio;
        this.windowInnerHeight = window.innerWidth / this.pixelRatio;
      }
      this.resolutionsSeen = [];
      this.hideAddressBar();
      window.addEventListener("ondeviceorientation", function(event) {
        _this.trace("ondeviceorientation", 2);
        _this.calculateWindowSize();
        return _this.setupViewport();
      });
      window.addEventListener("orientationchange", function(event) {
        _this.trace("orientationchange", 2);
        _this.calculateWindowSize();
        return _this.setupViewport();
      });
      window.addEventListener("resize", function(event) {
        _this.trace("resize " + window.innerHeight, 2);
        return _this.resetViewportIfChanged();
      });
      this.interval = 300;
      if (this.isIphone) {
        setTimeout(function() {
          return _this.monitorSize();
        }, this.interval);
      }
      setTimeout(function() {
        _this.calculateWindowSize();
        _this.setupViewport();
        setTimeout(_this.hideAddressBar, 1);
        return addEventListener("load", function() {
          setTimeout(this.hideAddressBar, 0);
          return setTimeout(this.hideAddressBar, 10);
        });
      }, 10);
      this.trace(navigator.userAgent, 2);
    }

    Viewporter.prototype.monitorSize = function() {
      var _this = this;
      this.resetViewportIfChanged();
      return setTimeout(function() {
        return _this.monitorSize();
      }, this.interval);
    };

    Viewporter.prototype.resetViewportIfChanged = function() {
      var _this = this;
      if (this.isLandscape) {
        this.calculateWindowSize();
        if (this.actualScreenWidth !== this.previousScreenSize.width || this.actualScreenHeight !== this.previousScreenSize.height) {
          this.setupViewport();
          this.previousScreenSize.width = this.actualScreenWidth;
          this.previousScreenSize.height = this.actualScreenHeight;
          return setTimeout(function() {
            return _this.setupViewport();
          }, 300);
        }
      }
    };

    Viewporter.prototype.calculateWindowSize = function() {
      var addressBarHeight, found, i, lowerHeight, navBarHeight, sh, statusBarHeight, sw, upperHeight, upperHeightWithBar, _i, _ref, _ref1;
      this.viewportWidth = 320;
      this.viewportHeight = 480;
      this.viewportScale = 1;
      this.isLandscape = true;
      if (typeof window.orientation !== "undefined") {
        this.isLandscape = Math.abs(window.orientation) === 90 ? true : false;
      } else {
        this.isLandscape = window.innerWidth > window.innerHeight;
      }
      this.actualScreenWidth = this.orientedWidth();
      this.actualScreenHeight = this.orientedHeight();
      window.innerHeight;
      sw = screen.width / this.pixelRatio;
      sh = screen.height / this.pixelRatio;
      if (sw > sh) {
        sw = sh;
        sh = screen.width / this.pixelRatio;
      }
      statusBarHeight = 10;
      navBarHeight = 44;
      addressBarHeight = 60;
      if (this.isIphone) {
        lowerHeight = this.isChrome ? 256 : 268;
        upperHeight = 320;
        upperHeightWithBar = 260;
        if (this.isLandscape) {
          if (this.actualScreenHeight <= lowerHeight && this.actualScreenHeight !== upperHeightWithBar) {
            this.actualScreenHeight = lowerHeight;
          }
        } else {
          if (this.actualScreenHeight === 444) {
            this.actualScreenHeight += addressBarHeight;
          }
        }
        if (this.actualScreenHeight >= upperHeightWithBar && this.actualScreenHeight !== lowerHeight && this.actualScreenHeight < upperHeight) {
          this.actualScreenHeight = upperHeight;
        }
      }
      found = false;
      for (i = _i = 0, _ref = this.resolutionsSeen.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (i < this.resolutionsSeen.length) {
          if (((_ref1 = this.resolutionsSeen[i]) != null ? _ref1.width : void 0) === this.actualScreenWidth && this.resolutionsSeen[i].height === this.actualScreenHeight) {
            found = true;
          }
        }
      }
      if (!this.isLandscape) {
        if (this.isIphone) {
          this.actualScreenHeight += 0;
        }
      }
      if (!found) {
        this.resolutionsSeen.push({
          width: this.actualScreenWidth,
          height: this.actualScreenHeight
        });
      }
      if (typeof window.orientation === "undefined" && !this.isIphone && !this.isAndroid) {
        this.actualScreenWidth = window.innerWidth;
        this.actualScreenHeight = window.innerHeight;
      }
      this.viewportChanged = false;
      if (this.viewportWidth !== this.actualScreenWidth || this.viewportHeight !== this.actualScreenHeight) {
        this.viewportChanged = true;
      }
      this.viewportWidth = this.actualScreenWidth;
      this.viewportHeight = this.actualScreenHeight;
      return this.viewportScale = this.actualScreenWidth / this.viewportWidth;
    };

    Viewporter.prototype.setupViewport = function() {
      var body, event, h, s, viewport, viewportContent, w, _ref,
        _this = this;
      viewport = document.querySelector("meta[name=viewport]");
      this.trace("" + screen.width + "x" + screen.height + " / " + this.viewportWidth + "x" + this.viewportHeight, 2);
      h = this.viewportHeight + Math.random() * .1;
      w = this.viewportWidth;
      s = this.viewportScale;
      if (this.isAndroid && this.isChrome) {
        h = this.viewportHeight + 0;
        w = this.viewportWidth + 0;
      }
      viewportContent = "width=" + w + ", height=" + h + ", initial-scale=" + s + ", minimum-scale=" + s + ", maximum-scale=" + s + ", user-scalable=no";
      body = document.getElementsByTagName("body");
      if ((body != null ? (_ref = body[0]) != null ? _ref.style : void 0 : void 0) != null) {
        body[0].style.height = this.viewportHeight + "px";
      }
      if (this.isAndroid && this.isChrome && (this.element != null)) {
        this.element.style.display = "none";
        setTimeout(function() {
          return _this.element.style.display = "block";
        }, (this.isAndroid && this.isChrome ? 500 : 10));
      }
      if (this.element != null) {
        this.element.style.height = this.viewportHeight + "px";
      }
      this.trace(viewportContent, 2);
      if (!this.isAndroid || !this.isChrome) {
        viewport.setAttribute("content", "width = device-width, height = device-height, initial-scale = 1, minimum-scale = 1, maximum-scale = 1, user-scalable = no");
      }
      setTimeout(function() {
        return viewport.setAttribute("content", viewportContent);
      }, 30);
      setTimeout(this.hideAddressBar, 1);
      if (this.viewportChanged) {
        event = document.createEvent("Event");
        event.initEvent("viewportchanged", true, true);
        event.width = this.viewportWidth;
        event.height = this.viewportHeight;
        return window.dispatchEvent(event);
      }
    };

    Viewporter.prototype.orientedWidth = function() {
      var w;
      return w = this.isLandscape ? this.screenHeight() : this.screenWidth();
    };

    Viewporter.prototype.orientedHeight = function() {
      var h, windowRatio;
      if (this.isIphone || this.isChrome) {
        windowRatio = window.innerWidth > window.innerHeight ? window.innerWidth / window.innerHeight : window.innerHeight / window.innerWidth;
        h = this.orientedWidth() * (this.isLandscape ? 1 / windowRatio : windowRatio);
      } else {
        h = this.isLandscape ? this.screenWidth() : this.screenHeight();
      }
      return Math.round(h);
    };

    Viewporter.prototype.screenWidth = function() {
      var div, sw;
      div = this.isAndroid ? 1 / this.pixelRatio : 1;
      return sw = screen.width < screen.height ? screen.width * div : screen.height * div;
    };

    Viewporter.prototype.screenHeight = function() {
      var div, sh;
      div = this.isAndroid ? 1 / this.pixelRatio : 1;
      return sh = screen.width > screen.height ? screen.width * div : screen.height * div;
    };

    Viewporter.prototype.hideAddressBar = function() {
      window.scrollTo(0, 0);
      return setTimeout(function() {
        return window.scrollTo(0, 1);
      }, 100);
    };

    Viewporter.prototype.trace = function(str, level) {
      var log;
      if (this.logging_level > 0) {
        if ((typeof console !== "undefined" && console !== null ? console.log : void 0) != null) {
          console.log(str);
        }
        if (level <= this.logging_level) {
          log = document.getElementById("log");
          if (log != null) {
            log.innerHTML = str + "<br />\n" + log.innerHTML;
            if (log.innerHTML.length > 2000) {
              return log.innerHTML = log.innerHTML.substring(0, 2000);
            }
          }
        }
      }
    };

    return Viewporter;

  })();

}).call(this);
