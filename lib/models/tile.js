// Generated by CoffeeScript 1.4.0
(function() {
  var Backbone, Tile,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone = require('./backbone');

  module.exports = Tile = (function(_super) {

    __extends(Tile, _super);

    function Tile() {
      return Tile.__super__.constructor.apply(this, arguments);
    }

    Tile.prototype.defaults = {
      positionX: 0,
      positionY: 0,
      card: false,
      player: false,
      cardPickup: false
    };

    Tile.prototype.tileWidth = 240;

    Tile.prototype.tileHeight = 210;

    Tile.prototype.initialize = function(props) {
      this.div = $('<div>');
      return this.update(props);
    };

    Tile.prototype.createHitarea = function(paper) {
      var _this = this;
      this.hitarea = paper.path("M0,0L0,0");
      return $(this.hitarea.node).on('click touchend', function(e) {
        e.preventDefault();
        setTimeout(function() {
          return _this.trigger('selectedTile', _this);
        }, 1);
        return false;
      });
    };

    Tile.prototype.update = function(prop, val) {
      var props;
      if (typeof prop === 'object') {
        props = prop;
      } else {
        props = {};
        props[prop] = val;
      }
      for (prop in props) {
        val = props[prop];
        if ((prop != null) && this.attributes.hasOwnProperty(prop)) {
          this.attributes[prop] = val;
        }
        this[prop] = val;
      }
      return this.render();
    };

    Tile.prototype.render = function() {
      var x, x0, x1, x2, x3, y, y0, y1, y2;
      this.template || (this.template = require('views/templates/tile'));
      if (this.hitarea != null) {
        x = this.attributes.positionX * (this.tileWidth * .75);
        y = (this.attributes.positionY + (this.attributes.positionX % 2 === 0 ? 0.5 : 0)) * this.tileHeight;
        x0 = x;
        x1 = x + this.tileWidth * .25;
        x2 = x + this.tileWidth * .75;
        x3 = x + this.tileWidth;
        y0 = y;
        y1 = y + this.tileHeight * .5;
        y2 = y + this.tileHeight;
        this.hitarea.attr({
          path: "M" + x1 + "," + y0 + "L" + x2 + "," + y0 + "L" + x3 + "," + y1 + "L" + x2 + "," + y2 + "L" + x1 + "," + y2 + "L" + x0 + "," + y1 + "L" + x1 + "," + y0 + "Z",
          fill: 'rgba(0,0,0,0)',
          stroke: '#fff',
          'stroke-width': 6
        });
      }
      if (this.positionX >= 0 && this.positionY >= 0) {
        return this.div.html(this.template(this));
      }
    };

    return Tile;

  })(Backbone.Model);

}).call(this);
