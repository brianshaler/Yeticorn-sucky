// Generated by CoffeeScript 1.4.0
(function() {
  var Backbone, Crystal, Crystals, Game, Player, Spell, Tile, Weapon,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone = require('./backbone');

  Tile = require('./tile');

  Player = require('./player');

  Crystals = require('models/crystals');

  Weapon = require('models/weapon_card');

  Crystal = require('models/crystal_card');

  Spell = require('models/spell_card');

  module.exports = Game = (function(_super) {

    __extends(Game, _super);

    function Game() {
      this.endTurn = __bind(this.endTurn, this);

      this.changePlayer = __bind(this.changePlayer, this);

      this.addPlayerToTile = __bind(this.addPlayerToTile, this);

      this.placePlayers = __bind(this.placePlayers, this);

      this.init = __bind(this.init, this);
      return Game.__super__.constructor.apply(this, arguments);
    }

    Game.prototype.defaults = {
      gameId: ''
    };

    Game.prototype.initialize = function(socket) {
      var colors, i, player, playerNames, _i, _ref;
      this.socket = socket;
      playerNames = ['@brianshaler', '@batkin', '@bobrox', '@johnmurch'];
      colors = ['blue', 'yellow', 'orange', 'gray'];
      this.players = [];
      for (i = _i = 0, _ref = playerNames.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        player = new Player(playerNames[i]);
        player.color = colors[i];
        this.players.push(player);
      }
      console.log(this.players);
      this.meId = this.currentPlayerId = Math.floor(Math.random() * this.players.length);
      this.currentPlayer = this.players[this.currentPlayerId];
      this.me = this.currentPlayer;
      this.tiles = [];
      this.cards = [];
      this.deck = [];
      this.generateMap();
      this.generateDeck();
      this.cardsOnBoard();
      this.dealCards();
      return this.placePlayers();
    };

    Game.prototype.initialize2 = function(attributes, options) {
      var obj, tile, _i, _len, _ref, _results;
      this.socket = options.socket;
      _ref = attributes.tiles;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        obj = _ref[_i];
        tile = new Tile();
        tile.positionX = obj.positionX;
        tile.positionY = obj.positionY;
        if (obj.card) {
          tile.card = obj.card;
        }
        if (obj.player) {
          _results.push(tile.player = obj.player);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Game.prototype.init = function() {
      return this.trigger('game.started');
    };

    Game.prototype.generateMap = function() {
      var cardPickup, col, mapCols, mapRows, row, tile, _i, _results;
      mapRows = 6;
      mapCols = 10;
      _results = [];
      for (row = _i = 0; 0 <= mapRows ? _i <= mapRows : _i >= mapRows; row = 0 <= mapRows ? ++_i : --_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (col = _j = 0; 0 <= mapCols ? _j <= mapCols : _j >= mapCols; col = 0 <= mapCols ? ++_j : --_j) {
            tile = new Tile();
            cardPickup = ((row + 1) % 2) + ((col + 1) % 3) === 0 ? true : false;
            tile.update({
              positionX: col,
              positionY: row,
              cardPickup: cardPickup
            });
            _results1.push(this.tiles.push(tile));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Game.prototype.generateDeck = function() {
      var card, count, deck, obj, _i, _j, _len, _ref, _results;
      deck = [];
      deck.push({
        type: 'weapon',
        name: 'Spork',
        damage: 1,
        description: 'The Spork can rip out your opponents eyes leaving them blind',
        playCost: 1,
        useCost: 1
      });
      deck.push({
        type: 'weapon',
        name: 'Shuriken',
        damage: 2,
        description: 'Aim for the jugular of your opponent with this powerful weapon',
        playCost: 2,
        useCost: 2
      });
      deck.push({
        type: 'weapon',
        name: 'Frying Pan',
        damage: 3,
        description: 'Stolen from the kitchen of a mad chef the magical Frying Pan is bloody',
        playCost: 3,
        useCost: 2
      });
      deck.push({
        type: 'weapon',
        name: 'Ray Gun',
        damage: 4,
        description: 'Set the Ray Gun to stun to freeze and hurt your opponent',
        playCost: 3,
        useCost: 3
      });
      deck.push({
        type: 'weapon',
        name: 'Bowling Ball',
        damage: 4,
        description: 'Be sure to throw this directly at the unicorn',
        playCost: 4,
        useCost: 4
      });
      deck.push({
        type: 'weapon',
        name: 'Scissors',
        damage: 5,
        description: 'Be sure to RUN with Scissors before and after cutting off your opponents ear',
        playCost: 5,
        useCost: 5
      });
      deck.push({
        type: 'weapon',
        name: 'Axe',
        damage: 6,
        description: 'Strike hard and fast with the powerful axe',
        playCost: 6,
        useCost: 6
      });
      deck.push({
        type: 'weapon',
        name: 'Rusty Fork',
        damage: 1,
        description: 'poop',
        playCost: 0,
        useCost: 1
      });
      deck.push({
        type: 'spell',
        name: 'bounce',
        damage: 0,
        description: 'poop',
        playCost: 2,
        useCost: 0
      });
      deck.push({
        type: 'spell',
        name: 'bounce',
        damage: 0,
        description: 'poop',
        playCost: 2,
        useCost: 0
      });
      deck.push({
        type: 'spell',
        name: 'bounce',
        damage: 0,
        description: 'poop',
        playCost: 2,
        useCost: 0
      });
      deck.push({
        type: 'spell',
        name: 'bounce',
        damage: 0,
        description: 'poop',
        playCost: 2,
        useCost: 0
      });
      deck.push({
        type: 'spell',
        name: 'bounce',
        damage: 0,
        description: 'poop',
        playCost: 2,
        useCost: 0
      });
      deck.push({
        type: 'spell',
        name: 'bounce',
        damage: 0,
        description: 'poop',
        playCost: 2,
        useCost: 0
      });
      deck.push({
        type: 'spell',
        name: 'bounce',
        damage: 0,
        description: 'poop',
        playCost: 2,
        useCost: 0
      });
      deck.push({
        type: 'weapon',
        name: 'Spork',
        damage: 1,
        description: 'The Spork can rip out your opponents eyes leaving them blind',
        playCost: 1,
        useCost: 1
      });
      deck.push({
        type: 'weapon',
        name: 'Shuriken',
        damage: 2,
        description: 'Aim for the jugular of your opponent with this powerful weapon',
        playCost: 2,
        useCost: 2
      });
      deck.push({
        type: 'weapon',
        name: 'Frying Pan',
        damage: 3,
        description: 'Stolen from the kitchen of a mad chef the magical Frying Pan is bloody',
        playCost: 3,
        useCost: 2
      });
      deck.push({
        type: 'weapon',
        name: 'Ray Gun',
        damage: 4,
        description: 'Set the Ray Gun to stun to freeze and hurt your opponent',
        playCost: 3,
        useCost: 3
      });
      deck.push({
        type: 'weapon',
        name: 'Bowling Ball',
        damage: 4,
        description: 'Be sure to throw this directly at the unicorn',
        playCost: 4,
        useCost: 4
      });
      deck.push({
        type: 'weapon',
        name: 'Scissors',
        damage: 5,
        description: 'Be sure to RUN with Scissors before and after cutting off your opponents ear',
        playCost: 5,
        useCost: 5
      });
      deck.push({
        type: 'weapon',
        name: 'Axe',
        damage: 6,
        description: 'Strike hard and fast with the powerful axe',
        playCost: 6,
        useCost: 6
      });
      deck.push({
        type: 'weapon',
        name: 'Rusty Fork',
        damage: 1,
        description: 'poop',
        playCost: 0,
        useCost: 1
      });
      deck.push({
        type: 'spell',
        name: 'bounce',
        damage: 0,
        description: 'poop',
        playCost: 2,
        useCost: 0
      });
      deck.push({
        type: 'spell',
        name: 'bounce',
        damage: 0,
        description: 'poop',
        playCost: 2,
        useCost: 0
      });
      deck.push({
        type: 'spell',
        name: 'bounce',
        damage: 0,
        description: 'poop',
        playCost: 2,
        useCost: 0
      });
      deck.push({
        type: 'spell',
        name: 'bounce',
        damage: 0,
        description: 'poop',
        playCost: 2,
        useCost: 0
      });
      deck.push({
        type: 'spell',
        name: 'bounce',
        damage: 0,
        description: 'poop',
        playCost: 2,
        useCost: 0
      });
      deck.push({
        type: 'spell',
        name: 'bounce',
        damage: 0,
        description: 'poop',
        playCost: 2,
        useCost: 0
      });
      deck.push({
        type: 'spell',
        name: 'bounce',
        damage: 0,
        description: 'poop',
        playCost: 2,
        useCost: 0
      });
      count = deck.length;
      for (_i = 0, _ref = count * .4; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--) {
        deck.push({
          type: 'crystal',
          name: 'Crystal',
          damage: 0,
          description: 'bling bling',
          playCost: 0,
          useCost: 0
        });
      }
      _results = [];
      for (_j = 0, _len = deck.length; _j < _len; _j++) {
        obj = deck[_j];
        switch (obj.type) {
          case 'weapon':
            card = new Weapon(obj);
            break;
          case 'crystal':
            card = new Crystal(obj);
            break;
          case 'spell':
            card = new Spell(obj);
            break;
          default:
            card = null;
        }
        if (card != null) {
          _results.push(this.cards.splice(Math.floor(Math.random() * this.cards.length), null, card));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Game.prototype.cardsOnBoard = function() {
      var tile, _i, _len, _ref, _results;
      _ref = this.tiles;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tile = _ref[_i];
        if (tile.cardPickup) {
          _results.push(tile.update({
            card: this.cards.pop()
          }));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Game.prototype.dealCards = function() {
      var i, player, startingCards, _i, _ref, _results;
      startingCards = 2;
      _results = [];
      for (i = _i = 0, _ref = startingCards - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _len, _ref1, _results1;
          _ref1 = this.players;
          _results1 = [];
          for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
            player = _ref1[_j];
            _results1.push(player.addCardToHand(this.cards.pop()));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Game.prototype.placePlayers = function() {
      var attempts, player, tile, tileId, _i, _len, _ref, _results, _tile, _tileId;
      _ref = this.players;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        attempts = 0;
        tileId = 0;
        tile = this.tiles[_tileId];
        while (attempts < 100) {
          _tileId = Math.floor(Math.random() * this.tiles.length);
          _tile = this.tiles[_tileId];
          if (!_tile.player && !_tile.cardPickup) {
            tileId = _tileId;
            tile = _tile;
            attempts = 999999;
          }
          attempts++;
          console.log("1 Add player " + player.name + " to tile " + tile.positionX + "x" + tile.positionY);
        }
        _results.push(this.addPlayerToTile(player, tile));
      }
      return _results;
    };

    Game.prototype.addPlayerToTile = function(player, tile) {
      var _i, _len, _ref, _tile;
      _ref = this.tiles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _tile = _ref[_i];
        if (_tile.player && _tile.player.name === player.name) {
          _tile.player = null;
        }
      }
      console.log("Add player " + player.name + " to tile " + tile.positionX + "x" + tile.positionY);
      return tile.update({
        player: player
      });
    };

    Game.prototype.changePlayer = function() {
      this.meId++;
      if (this.meId >= this.players.length) {
        this.meId = 0;
      }
      this.me = this.players[this.meId];
      console.log("I am " + this.me.name + "!");
      return this.trigger('game.rerender');
    };

    Game.prototype.endTurn = function() {
      this.currentPlayerId++;
      if (this.currentPlayerId >= this.players.length) {
        this.currentPlayerId = 0;
      }
      this.meId = this.currentPlayerId;
      this.me = this.players[this.meId];
      this.currentPlayer = this.players[this.currentPlayerId];
      this.currentPlayer.addCardToHand(this.cards.pop());
      this.currentPlayer.crystals.incrementAll();
      return this.trigger('game.rerender');
    };

    return Game;

  })(Backbone.Model);

}).call(this);
