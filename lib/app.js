// Generated by CoffeeScript 1.4.0
(function() {
  var Backbone, GameSchema, PlayerSchema, ServerApp, express, fs, http, idgen, path, socketio,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  express = require('express');

  http = require('http');

  socketio = require('socket.io');

  path = require('path');

  fs = require('fs');

  idgen = require('idgen');

  Backbone = require('backbone');

  GameSchema = require('./db/GameSchema');

  PlayerSchema = require('./db/PlayerSchema');

  module.exports = ServerApp = (function(_super) {

    __extends(ServerApp, _super);

    function ServerApp() {
      return ServerApp.__super__.constructor.apply(this, arguments);
    }

    ServerApp.prototype.initialize = function() {
      this.initExpress();
      return this.initSockets();
    };

    ServerApp.prototype.initExpress = function() {
      var _this = this;
      this.app = express();
      this.server = http.createServer(this.app);
      this.app.configure(function() {
        _this.app.set('port', process.env.PORT || 8000);
        _this.app.use(express.favicon());
        _this.app.use(express.logger('dev'));
        _this.app.use(express.bodyParser());
        _this.app.use(express.methodOverride());
        _this.app.use(_this.app.router);
        return _this.app.use(express["static"](path.join(process.cwd(), 'public')));
      });
      return this.app.configure('development', function() {
        return _this.app.use(express.errorHandler());
      });
    };

    ServerApp.prototype.initSockets = function() {
      this.io = socketio.listen(this.server);
      return this.io.sockets.on('connection', function(socket) {
        socket.emit('intro.show');
        socket.on('playerSetup.submit', function(name) {
          return socket.emit('gameSetup.show', idgen());
        });
        return socket.on('gameSetup.submit', function() {
          return socket.emit('game.show');
        });
      });
    };

    return ServerApp;

  })(Backbone.Model);

}).call(this);
