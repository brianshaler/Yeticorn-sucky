// Generated by CoffeeScript 1.4.0
(function() {
  var Backbone, ServerApp, cookie, db, express, fs, http, idgen, path, socketio, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  express = require('express');

  http = require('http');

  socketio = require('socket.io');

  path = require('path');

  fs = require('fs');

  idgen = require('idgen');

  _ = require('underscore');

  Backbone = require('backbone');

  db = require('./db');

  cookie = require('cookie');

  module.exports = ServerApp = (function(_super) {

    __extends(ServerApp, _super);

    function ServerApp() {
      return ServerApp.__super__.constructor.apply(this, arguments);
    }

    ServerApp.prototype.initialize = function() {
      this.games = {};
      this.gamesByGameId = {};
      this.players = {};
      this.gameSockets = {};
      this.playerSockets = {};
      this.rootPath = path.dirname(path.normalize(__dirname));
      this.initExpress();
      return this.initSockets();
    };

    ServerApp.prototype.initExpress = function() {
      var _this = this;
      this.app = express();
      this.server = http.createServer(this.app);
      return this.app.configure(function() {
        _this.app.set('port', process.env.PORT || 8000);
        _this.app.use(express.favicon());
        _this.app.use(express.logger('dev'));
        _this.app.use(express.bodyParser());
        _this.app.use(express.methodOverride());
        _this.app.use(_this.app.router);
        _this.app.use(express["static"](path.join(_this.rootPath, 'public')));
        return _this.app.use(express.errorHandler());
      });
    };

    ServerApp.prototype.playerSetup = function(socket, playerName, gameId) {
      var app, game, player, withGame;
      app = this;
      player = new db.PlayerModel({
        name: playerName
      });
      withGame = function(app, game) {};
      game = null;
      if (gameId) {
        app.findGame(gameId, function(err, game) {
          if (err) {
            throw err;
          }
          return game = app.playerJoinGame(socket, player, game);
        });
      } else {
        game = new db.GameModel({
          gameId: idgen(),
          creator: player._id
        });
        game.save(function(err) {
          if (err) {
            return console.log(err);
          } else {
            return app.playerJoinGame(socket, player, game);
          }
        });
      }
      if (!game) {
        console.log('game not found', game);
      }
    };

    ServerApp.prototype.playerJoinGame = function(socket, player, game) {
      var app;
      app = this;
      if (!game || !game.gameId) {
        console.log(game);
      }
      app.games[game._id] = game;
      app.gamesByGameId[game.gameId.toString()] = game;
      player.game = game._id;
      return player.save(function(err) {
        var found;
        if (err) {
          console.log(err);
        }
        app.players[player._id] = player;
        found = false;
        game.players.forEach(function(_player) {
          console.log("game has " + _player._id);
          if (_player._id.toString() === player._id.toString()) {
            return found = true;
          }
        });
        if (!found) {
          console.log("game doesn't yet have " + player._id);
          game.players.push(player._id);
        }
        return game.save(function(err) {
          var gameSockets, playersInGame, _base, _base1, _name, _name1;
          if (err) {
            throw err;
          }
          (_base = app.gameSockets)[_name = game.gameId] || (_base[_name] = {});
          app.gameSockets[game.gameId][socket.id] = socket;
          (_base1 = app.playerSockets)[_name1 = player._id] || (_base1[_name1] = {});
          app.playerSockets[player._id][socket.id] = socket;
          gameSockets = app.gameSockets[game.gameId];
          playersInGame = _.map(game.players, function(playerId) {
            if (playerId != null ? playerId._id : void 0) {
              playerId = playerId._id;
            }
            return app.players[playerId];
          });
          game.players = playersInGame;
          socket.emit('player.ready', player);
          return app.findGame(game.gameId, function(err, game) {
            return _.each(gameSockets, function(socket) {
              return socket.emit('game.show', game);
            });
          });
        });
      });
    };

    ServerApp.prototype.gameSetup = function(event) {
      var game, gameSockets;
      game = this.gamesByGameId[event.gameId];
      if (!game) {
        console.log('game not found', event.gameId);
        return;
      }
      gameSockets = this.gameSockets[game.gameId];
      return _.each(gameSockets, function(socket) {
        return socket.emit('game.created', game);
      });
    };

    ServerApp.prototype.findGame = function(gameId, cb) {
      var filter;
      filter = {
        gameId: gameId
      };
      return db.GameModel.find().populate('players').populate('creator').find(filter, function(err, games) {
        var game;
        if ((games != null) && games.length > 0) {
          game = games[0];
        } else {
          game = null;
        }
        return cb(err, game);
      });
    };

    ServerApp.prototype.initSockets = function() {
      var app;
      this.io = socketio.listen(this.server);
      this.io.set('log level', 1);
      app = this;
      return this.io.sockets.on('connection', function(socket) {
        var cookies, existingPlayer, _ref, _ref1, _ref2,
          _this = this;
        existingPlayer = false;
        if ((_ref = socket.handshake) != null ? (_ref1 = _ref.headers) != null ? _ref1.cookie : void 0 : void 0) {
          cookies = cookie.parse(socket.handshake.headers.cookie);
          if ((cookies != null ? (_ref2 = cookies.playerId) != null ? _ref2.length : void 0 : void 0) > 0) {
            existingPlayer = true;
            console.log('PlayerModel.findOne {_id: ' + cookies.playerId + '}');
            db.PlayerModel.findOne({
              _id: cookies.playerId
            }, function(err, player) {
              if (player) {
                return socket.emit('player.ready', player);
              }
            });
          }
        }
        socket.emit('intro.show');
        socket.on('player.create', function(playerName, gameId) {
          console.log('on player.create');
          return app.playerSetup(socket, playerName, gameId);
        });
        socket.on('player.join', function(playerId, gameId) {
          console.log('on player.join');
          if (playerId && playerId.length > 0) {
            return db.PlayerModel.findOne(function(err, player) {
              if (err) {
                throw err;
              }
              if (player) {
                return app.findGame(gameId, function(err, game) {
                  if (err) {
                    throw err;
                  }
                  if ((game != null) && game) {
                    return app.playerJoinGame(socket, player, game);
                  } else {
                    return console.log('player.join failed because gameId does not exist');
                  }
                });
              } else {
                return console.log('player.join failed because playerId does not exist');
              }
            });
          }
        });
        socket.on('game.create', function(event) {
          console.log('on game.create');
          return app.gameSetup(event);
        });
        socket.on('game.join', function(playerName, gameId) {
          console.log('on game.join');
          return app.gameSetup(event);
        });
        return socket.on('game.find', function(gameId) {
          console.log('on game.find');
          return app.findGame(gameId, function(err, game) {
            if (err) {
              console.log('ERROR');
              console.log(err);
              return;
            }
            if ((game != null) && game) {
              console.log('emit game.found');
              console.log(game);
              return socket.emit('game.found', game);
            } else {
              console.log('emit game.notfound');
              return socket.emit('game.notfound');
            }
          });
        });
      });
    };

    return ServerApp;

  })(Backbone.Model);

}).call(this);
