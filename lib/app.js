// Generated by CoffeeScript 1.4.0
(function() {
  var Backbone, ServerApp, db, express, fs, http, idgen, path, socketio, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  express = require('express');

  http = require('http');

  socketio = require('socket.io');

  path = require('path');

  fs = require('fs');

  idgen = require('idgen');

  _ = require('underscore');

  Backbone = require('backbone');

  db = require('./db');

  module.exports = ServerApp = (function(_super) {

    __extends(ServerApp, _super);

    function ServerApp() {
      return ServerApp.__super__.constructor.apply(this, arguments);
    }

    ServerApp.prototype.initialize = function() {
      this.games = {};
      this.gamesByGameId = {};
      this.players = {};
      this.gameSockets = {};
      this.playerSockets = {};
      this.rootPath = path.dirname(path.normalize(__dirname));
      this.initExpress();
      return this.initSockets();
    };

    ServerApp.prototype.initExpress = function() {
      var _this = this;
      this.app = express();
      this.server = http.createServer(this.app);
      return this.app.configure(function() {
        _this.app.set('port', process.env.PORT || 8000);
        _this.app.use(express.favicon());
        _this.app.use(express.logger('dev'));
        _this.app.use(express.bodyParser());
        _this.app.use(express.methodOverride());
        _this.app.use(_this.app.router);
        _this.app.use(express["static"](path.join(_this.rootPath, 'public')));
        return _this.app.use(express.errorHandler());
      });
    };

    ServerApp.prototype.playerSetup = function(socket, playerName, gameId) {
      var game, gameSockets, player, _base, _base1, _name, _name1;
      game = null;
      if (gameId) {
        game = this.gamesByGameId[gameId];
      } else {
        game = new db.GameModel({
          gameId: idgen()
        });
      }
      if (!game) {
        console.log('game not found', gameId);
        return;
      }
      this.games[game._id] = game;
      this.gamesByGameId[game.gameId.toString()] = game;
      player = new db.PlayerModel({
        name: playerName,
        game: game
      });
      this.players[player._id] = player;
      game.players.push(player);
      game.players[game.players.length - 1] = player;
      (_base = this.gameSockets)[_name = game.gameId] || (_base[_name] = {});
      this.gameSockets[game.gameId][socket.id] = socket;
      (_base1 = this.playerSockets)[_name1 = player._id] || (_base1[_name1] = {});
      this.playerSockets[player._id][socket.id] = socket;
      gameSockets = this.gameSockets[game.gameId];
      return _.each(gameSockets, function(socket) {
        return socket.emit('gameSetup.show', game);
      });
    };

    ServerApp.prototype.gameSetup = function(event) {
      var game, gameSockets;
      game = this.gamesByGameId[event.gameId];
      if (!game) {
        console.log('game not found', gameId);
        return;
      }
      gameSockets = this.gameSockets[game.gameId];
      return _.each(gameSockets, function(socket) {
        return socket.emit('gameSetup.complete', game);
      });
    };

    ServerApp.prototype.initSockets = function() {
      var app;
      this.io = socketio.listen(this.server);
      app = this;
      return this.io.sockets.on('connection', function(socket) {
        socket.emit('intro.show');
        socket.on('playerSetup.submit', function(playerName, gameId) {
          return app.playerSetup(socket, playerName, gameId);
        });
        return socket.on('gameSetup.submit', function(event) {
          return app.gameSetup(event);
        });
      });
    };

    return ServerApp;

  })(Backbone.Model);

}).call(this);
