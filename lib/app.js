// Generated by CoffeeScript 1.4.0
(function() {
  var Backbone, ServerApp, db, express, fs, http, idgen, path, socketio, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  express = require('express');

  http = require('http');

  socketio = require('socket.io');

  path = require('path');

  fs = require('fs');

  idgen = require('idgen');

  _ = require('underscore');

  Backbone = require('backbone');

  db = require('./db');

  module.exports = ServerApp = (function(_super) {

    __extends(ServerApp, _super);

    function ServerApp() {
      return ServerApp.__super__.constructor.apply(this, arguments);
    }

    ServerApp.prototype.initialize = function() {
      this.games = {};
      this.gameSockets = {};
      this.players = {};
      this.playerSockets = {};
      this.rootPath = path.dirname(path.normalize(__dirname));
      this.initExpress();
      this.initMongo();
      return this.initSockets();
    };

    ServerApp.prototype.initExpress = function() {
      var _this = this;
      this.app = express();
      this.server = http.createServer(this.app);
      return this.app.configure(function() {
        _this.app.set('port', process.env.PORT || 8000);
        _this.app.use(express.favicon());
        _this.app.use(express.logger('dev'));
        _this.app.use(express.bodyParser());
        _this.app.use(express.methodOverride());
        _this.app.use(_this.app.router);
        _this.app.use(express["static"](path.join(_this.rootPath, 'public')));
        return _this.app.use(express.errorHandler());
      });
    };

    ServerApp.prototype.initMongo = function() {
      var app;
      app = this;
      this.db = db.db;
      this.GameModel = db.GameModel;
      this.PlayerModel = db.PlayerModel;
      this.EventModel = db.EventModel;
      this.CardModel = db.CardModel;
      this.TileModel = db.TileModel;
      this.eventStream = this.EventModel.find().limit(10).tailable().populate('game').stream();
      this.eventStream.on('error', function(err) {
        return console.error(err);
      });
      return this.eventStream.on('data', function(event) {
        var gameSockets;
        console.log('event', event);
        console.log('gameSockets', app.gameSockets);
        if (event.action === 'game.join') {
          gameSockets = app.gameSockets[event.game.gameId];
          console.log('in join', gameSockets);
          return _.each(gameSockets, function(socket) {
            return socket.emit('gameSetup.show', event.game);
          });
        }
      });
    };

    ServerApp.prototype.initSockets = function() {
      var app;
      this.io = socketio.listen(this.server);
      app = this;
      return this.io.sockets.on('connection', function(socket) {
        socket.emit('intro.show');
        socket.on('playerSetup.submit', function(name, gameId) {
          var game, gameSetup;
          gameSetup = function(game) {
            var player;
            player = new app.PlayerModel({
              name: name,
              game: game
            });
            game.players.push(player);
            return game.save(function(err) {
              var event, _base, _base1, _name, _name1;
              if (!err) {
                app.games[game.gameId] = game;
                (_base = app.gameSockets)[_name = game.gameId] || (_base[_name] = {});
                app.gameSockets[game.gameId][socket.id] = socket;
                app.players[player._id] = player;
                (_base1 = app.playerSockets)[_name1 = player._id] || (_base1[_name1] = {});
                app.playerSockets[player._id][socket.id] = socket;
                event = new app.EventModel({
                  game: game,
                  player: player,
                  action: 'game.join',
                  data: {
                    playerId: player._id,
                    gameId: game.gameId
                  }
                });
                return event.save();
              }
            });
          };
          if (gameId) {
            return app.GameModel.findOne({
              gameId: gameId
            }).exec(function(err, game) {
              if (game && !err) {
                return gameSetup(game);
              }
            });
          } else {
            game = new app.GameModel({
              gameId: idgen()
            });
            return game.save(function(err) {
              if (!err) {
                return gameSetup(game);
              }
            });
          }
        });
        return socket.on('gameSetup.submit', function() {
          return socket.emit('game.show');
        });
      });
    };

    return ServerApp;

  })(Backbone.Model);

}).call(this);
